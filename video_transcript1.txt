A typical webpage is made up of three separate layers that work together to deliver an experience to the user. There's a content layer or the information you see on the page, a presentation layer that handles how that information looks, and a behavior layer that lets users interact with that page. CSS or Cascading Style Sheets, provides the presentation layer and creates the visual style of webpages, using colors, typography, layout and more. The behavior layer is handled by JavaScript, to add interactivity to the page. For example, popping up a larger image when a user clicks a small image. HTML or HyperText Markup Language provides the content layer and forms the structural foundation of a webpage. It's the language common to every website. So if you wanna build your own website, web application, or know how to edit other websites and apps you'll need to understand HTML. I'm Gil, your front-end web development teacher here at Treehouse. Your journey into learning code begins here with HTML basics. You may have already worked with HTML or seen it in action in a previous course. So in this course, we're going to dive deeper into many of the core concepts of HTML. So first, let's break down the meaning of the initialism, HTML. Hypertext Markup Language. Hypertext is any text that can be displayed on a computer screen and contains links to other texts, or hypertext documents. The web is a collection of billions of documents, interconnected by hyperlinks. For example, the page you're viewing right now is a hypertext document and you most likely clicked on a hyperlink to get to this page. A markup language provides meaning to text in a document using instructions that describe how text should be structured, formatted, and laid out. So HTML is a markup language the browser uses to present information to users, like text, links, images, and videos. It's the basic component from which all websites and applications on the web are built. Let's quickly review how HTML works, what it looks like, and why we use it to structure content on the web. If you've worked with word processing program like Microsoft Word or Google Docs, you've likely formatted blocks of plain text by creating a title for the document and headings to indicate the start of important sections of content. Also adjusting the size of text and making it bold, so that it stands out from other text. You may have inserted links to other documents or webpages, or you've inserted line breaks, spaces, and horizontal lines to divide and break up sections of content. In other words, you used the program's formatting options to give the document a clear structure. HTML provides similar text formatting instructions to browsers in the form of tags called markup. So just like a Word or Google document with no formatting will look like this. A webpage without HTML tags or markup would look like this. Now here's the same content displayed in the browser using markup. Notice the text on the page is easier to scan and understand, and it provides links to navigate to other pages and more content. If I right or Ctrl+Click on the page and click View Page Source, I'm able to see the HTML the browser uses to display this simple webpage. Now take a look at the sets of tags that surround the content. That's the markup responsible for displaying this page. And notice how even though these tags are meant as instructions for the browser, they are named using friendly, human readable words, like title, body, header, main and footer. HTML is understood by all browsers, from browsers on phones to tablets to desktop computers. That's why every website and web app you use is made using HTML. It's the language of the web, and I'm going to teach you how to write it. By the end of this course, you will have learned the skills to create the HTML structure of a simple website about virtual reality, like this. And as I mentioned before, HTML is just part of what makes a website. Adding a bit of CSS can transform the structure of a page into something beautiful, like this.So let's get started.








Even though most web pages look different from one another, every web page follows a common structure. Each webpage you create should instruct the browser the version of HTML you're using, provide general information about the page like the title for example. And define where to display the visible content of the page like images, text and links. You can code along with me by clicking the launch work space button next to the video. This will bring up the text editor we're going to use to build our simple website using HTML. For now you should only see three image files with a .jpg extension, and you'll learn more about these image files later when we add images to our page. Before we write any code, we'll need to create an HTML file. In the work space menu, click File, New File, and we'll name the file index.html. A file ending in .html let's the browser know that it's an HTML file, and index is the most common filename used for the default or home page of a website. So now we're ready to start writing code. Every HTML page begins with a document type or doc type declaration that informs the browser which version of HTML the page is using, so it can render it correctly. So at the very top of the file, type a left angle bracket followed by an !DOCTYPE space, then we'll type html, followed by a right angle bracket. Now there used to be a lot of really complicated document types, but the latest version for HTML5 is really simple, it's just doc type html. Next below the doc type, we'll add a set of opening and closing HTML tags. So first, type the opening tag with a left angle bracket, then html, and a right angle bracket. Now every closing tag in HTML should include a forward slash in front of the tag name. So the closing HTML tag should be /html. So these tags together describe the HTML element which is usually the root or top level element of a webpage. And this tells the browser that everything we add in between the opening and closing html tags is html code. So next inside the html element, I'll indent two spaces by pressing the space bar twice, then add two elements, head and body. When you place one element inside another, it's called nesting. So the head and body here are nested inside the html element. So to represent the fact that one set of tags is inside another, it's a good idea to indent the nested tags like I did here. The head element contains information about the page like the page title, for example. And most of the information you add to the head isn't visible in the browser. For instance, you could add links to JavaScript and CSS files to add the behavior and presentation layers, respectively. But for now, we'll only worry about adding a title. So inside the head element, I'll nest a title element by typing opening and closing title tags. And between the title tags, I'll write the text Experience VR. Save the file and click the preview icon on the top right corner of the workspace. And this opens the index.html file in another browser window or tab. So you should see the text you wrote between the title tags appear in the browser's title bar or on the pages tab at the top of the window. Now below the head is the body, which is where you include any content you want to display in the browser like images, headings, paragraphs, and links. The body element is currently an empty set of tags, so the browser is not displaying anything yet. So let's quickly add content. Back inside the body element, indent two spaces and write the text, Experience VR. Press Enter, and right below I'll type, A simple blog about virtual reality experiences. Save the file and refresh the browser and you'll see that even though we wrote this text on two separate lines, the browser displays it on one line. You see, the browser doesn't know how we want to display this text on the screen. So we need to add HTML tags or markup to tell the browser how to display it. HTML is made up of many, many tags that are used to give webpages structure, format text, and more like you saw in the previous video. But you don't have to memorize all or even most of the tags. You can use a resource like the MDN, or Mozilla Developer Network, HTML reference to see a list of all the available HTML elements. Whenever I feel stuck, I visit this page and the elements are even grouped by function to make it easier to find what you need. I posted the link to this page in the teacher's notes. So why don't you check out MDN now to review the HTML elements from this video. You could even get a head start learning about the heading and paragraph elements, which we'll add to the webpage in the next video. Remember, there should be only one HTML, head, title, and body element in a page. And here's a tip. You don't have to retype the doc type and comment tags every time you create a new webpage. Instead, you'll make a copy or template of this code and use it to copy from and paste them to a new webpage. In addition, many text editors can quickly insert html snippets like a basic html template into your html file using keyboard shortcuts. I've posted information about html code snippets in the teacher's notes.








You've learned that HTML provides structure and meaning to content in the form of tags called markup. When you write markup, you're telling the browser how you want to display your content. Remember what the page looked like earlier before we added markup? It was one long line of text, and that wasn't a very pleasant reading experience was it? Structuring content with HTML, organizes your content and makes your users' reading experience easier and more enjoyable. Books, magazines, and newspapers organize text using titles, subheadings, and paragraphs. HTML provides similar elements to organize blocks of content. The most common elements used to structure content are headings and paragraphs. Headings add organization and structure to the page by identifying sections of content. So the site we're going to build is about virtual reality experiences. So, to make the text, Experience VR, the main heading of  tag in front of the text and place the closing tag at the end of the text. h1 is a heading element and the 1 in the tag name means that it's a level 1 heading, the main or most important heading on the page. Usually, the first heading on a web page is a h1. It's like the main headline in a newspaper or magazine article. So, when you save the HTML file and refresh the browser, you'll see the text Experience VR in large bold letters and the text outside the h1 element appears below the heading. Now that we've set the page's main heading, let's place the rest of the text inside a paragraph. Paragraphs in HTML are created using the p tag, so type an opening p tag at the start of the text and place the closing p tag at the end. Let's add one more paragraph below this one. Type a set of p tags and write the text, Virtual Reality is becoming well known as a form of entertainment. But its also finding its way into fields like education, industrial design, healthcare, and so much more. You can also copy this text from the teacher's notes of this video. I'll save the file, refresh the browser, and notice how the browser places each paragraph on a new line and adds extra space to the top and bottom sides to separate them from adjacent paragraphs and other content. h1 is not the only heading available. There are six heading elements in HTML, h1 through h6. Each identifies a new section of content and represents a different level of importance on their page, h1 being the highs level and h6 the lowest. Back in our page, let's markup a new section of content for blog entries using a level 2 heading. You define a level 2 heading using the h2 tag. So, below the bottom paragraph, type a set of opening and closing h2 tags, and inside, the text, Latest VR Articles. I'll give this a save. And over in the browser the h1 is the highest level heading on the page. So the browser makes it stand out from all the other text. And an h2 is slightly less important. So, the browser displays it a little smaller. Now, from here, you could use an h3 tag to create a smaller heading, and that's a subheading of the h2, an h4 tag for an even smaller heading and so on. And if you place all the available headings next to each other on a page, they would look like this. From the largest or most important, to the smallest, or the one of lowest importance. I'll go ahead and undo that. And now, let's add a couple of blog entries below the subheading, or the h2. We'll use an h3 to mark up the title, and paragraph tags for the text. So, below the h2 I'll type a set of h3 tags. And the text for this one will be How Schools Use Virtual Reality to Improve Education. Right below, I'll add a set of paragraph tags and I'll paste in some place holder text as the paragraph text. You can also copy these exact heading and paragraph text snippets from the teacher's notes of this video or feel free to write your own. I'll add one more log entry right bellow the paragraph, again I'll type a set of h3 tags. And the text for this one will be the Advantages of VR Simulation. Add a paragraph tag down below. And for this text I'll go ahead and just copy and paste in the place holder text from above. All right, so our page is starting to take shape. And up next you'll learn about creating lists with HTML.






You've learned that HTML provides structure and meaning to content in the form of tags called markup. When you write markup, you're telling the browser how you want to display your content. Remember what the page looked like earlier before we added markup? It was one long line of text, and that wasn't a very pleasant reading experience was it? Structuring content with HTML, organizes your content and makes your users' reading experience easier and more enjoyable. Books, magazines, and newspapers organize text using titles, subheadings, and paragraphs. HTML provides similar elements to organize blocks of content. The most common elements used to structure content are headings and paragraphs. Headings add organization and structure to the page by identifying sections of content. So the site we're going to build is about virtual reality experiences. So, to make the text, Experience VR, the main heading of the site, write an opening tag in front of the text and place the closing tag at the end of the text. h1 is a heading element and the 1 in the tag name means that it's a level 1 heading, the main or most important heading on the page. Usually, the first heading on a web page is a h1. It's like the main headline in a newspaper or magazine article. So, when you save the HTML file and refresh the browser, you'll see the text Experience VR in large bold letters and the text outside the h1 element appears below the heading. Now that we've set the page's main heading, let's place the rest of the text inside a paragraph. Paragraphs in HTML are created using the p tag, so type an opening p tag at the start of the text and place the closing p tag at the end. Let's add one more paragraph below this one. Type a set of p tags and write the text, Virtual Reality is becoming well known as a form of entertainment. But its also finding its way into fields like education, industrial design, healthcare, and so much more. You can also copy this text from the teacher's notes of this video. I'll save the file, refresh the browser, and notice how the browser places each paragraph on a new line and adds extra space to the top an bottom sides to separate them from adjacent paragraphs and other content. h1 is not the only heading available. There are six heading elements in HTML, h1 through h6. Each identifies a new section of content and represents a different level of importance on their page, h1 being the highs level and h6 the lowest. Back in our page, let's markup a new section of content for blog entries using a level 2 heading. You define a level 2 heading using the h2 tag. So, below the bottom paragraph, type a set of opening and closing h2 tags, and inside, the text, Latest VR Articles. I'll give this a save. And over in the browser the h1 is the highest level heading on the page. So the browser makes it stand out from all the other text. And an h2 is slightly less important. So, the browser displays it a little smaller. Now, from here, you could use an h3 tag to create a smaller heading, and that's a subheading of the h2, an h4 tag for an even smaller heading and so on. And if you place all the available headings next to each other on a page, they would look like this. From the largest or most important, to the smallest, or the one of lowest importance. I'll go ahead and undo that. And now, let's add a couple of blog entries below the subheading, or the h2. We'll use an h3 to mark up the title, and paragraph tags for the text. So, below the h2 I'll type a set of h3 tags. And the text for this one will be How Schools Use Virtual Reality to Improve Education. Right below, I'll add a set of paragraph tags and I'll paste in some place holder text as the paragraph text. You can also copy these exact heading and paragraph text snippets from the teacher's notes of this video or feel free to write your own. I'll add one more log entry right bellow the paragraph, again I'll type a set of h3 tags. And the text for this one will be the Advantages of VR Simulation. Add a paragraph tag down below. And for this text I'll go ahead and just copy and paste in the place holder text from above. All right, so our page is starting to take shape. And up next you'll learn about creating lists with HTML.









Creating Lists

Lists are an important component of web design and front end web development. Just about every website or application on the web uses lists to display navigation menus, shopping cart items, movie  


We've all created lists before. Grocery list, a list of our favorite restaurants and movies, or a list of guest we want to invite to a party. Lists are an important component of web design and firm and web development. Just about every website or application on the web uses lists to display navigation menus, shopping cart items, movie listings and so much more. HTML provides three elements for creating list, <ul> for unordered list, <ol> for ordered list, and <dl> for description list. The DL element is used to create groups of terms in descriptions, like in a glossary. It's not as common as the other two lists, so I'm not gonna cover it in this course, but I've posted resources and examples of description lists in the teachers notes of this video. Now let's create a list of the different sections that will make up our website, Home, About, Articles, and Contact. We'll mark up the list using the UL element. UL stands for unordered list. So, back in our index.html file, below the main heading and paragraph, add a set of opening and closing <ul> tags, and inside the ul write Home, then below that About, Articles, and Contact. When you think of a list, you imagine each item in the list placed on its own line. Well, the UL tag, by itself, will not display a typical list. As you can see here in the browser, all items are placed on the same line. So, to specify the individual items of a list, you place them inside LI tags, which stands for list item. So, back in our list, let's add opening and closing <li> tags around each menu item. Each LI now represents an item in the list, and LI tags, when placed or nested inside a UL tag, are displayed using bullet points. Again <ul> stands for unordered list, meaning the order in which the items are displayed is of no significance. So for example, if you're creating a shopping list, the order in which the items appear doesn't matter, you just need to buy every item listed. But if you need to list items in a specific order, like step by step instructions of a recipe or a list of your top 10 favorite movies, then you can use an ordered list using the <ol> element. So we'll change the opening <ul> tag to an <ol> tag, and we'll do the same for the closing tag. We'll give it a save, and as you can see in the browser, the <ol> element uses numbers instead of bullet points in order from one to four. Ordered and unordered list can also be nested inside other lists to create multi-level lists. So back on our list, I'll change the <ol> tags back to <ul> tags. Then I'll expand the contact list item, and below the word contact let's nest an unordered list by typing a set of opening and closing <ul> tags, and in this list I'll create three list items but you can add as many as you like. So, I'll start with Email. Below that I'll create a list item for Phone, And a list item for Address. I'll give the file a Save, and over in the browser, notice how when you nest a list, the browser adds indentation to give the list structure. So notice how now our list resembles an outline. So to recap, unordered lists display bullets, ordered lists display numbers, and you're able to nest lists inside list items and use a combination of <ul> and <ol> tags to create a list. Now I'm going to delete the nested UL inside the main UL. But to let you experiment with lists on your own I've posted a tech snippet in the teacher's notes about the top VR resources. So go ahead and add that text below the blog entries here, and turn it into an ordered list and feel free to pause this video while you grab the text and create the list. So first, I'll paste the text into the page just above the closing body tag. So this new Top VR Resources content is indirectly related to the Latest VR Articles section. So its heading shouldn't hold equal or a more importance than the Latest VR Articles h2. So we'll mark up the resources heading as a sub-heading of the H2 using an H3. Then, we'll place the list inside an ordered list by wrapping it inside a set of <ol> tags, And we'll place the items inside a <li> tags. All right, let's save our file, refresh the browser, and there you have it, our top VR resources list. So in the next video, I'll teach you about links, the most important feature of the web.









Creating Links
Links are the single most unifying component of the web. Links let you jump from page to page, and website to website, to find the information you're after.

Our webpage is starting to take shape, but no webpage is complete without links. Links are the single most unifying component of the web. They're what will let you jump from page to page, and website to website, to find the information you're after. Without links, the web wouldn't be a web. It would just be a massive collection of lonely pages. You can turn any text into a link by placing it inside a set of a tags. Back in our index.html file, below the paragraph that's just above our h2, type a set of a tags, and add the text, Start Your VR Journey. The a tag forms an anchor element, that's what the a means. It's named that way because you use the element to attach or anchor a URL to a piece of text. So now, everything between the opening and closing anchor tags becomes a link users can click to navigate to other webpages or a different location of the current page. So over in the browser, there are no visible changes to the text yet, and when you click on the text nothing happens. So to let the browser know that this is a link, we'll need to provide it extra information, like the web address to link to. HTML elements accept attributes that give them further meaning and additional behavior. Attributes provide extra bits of information to the browser, like where the text wrapped in a tags should link to, or whether the link should open in a new browser tab or window. You're gonna learn a whole lot more about attributes of HTML elements throughout this course. So let's let's start with the href, or hypertext reference attribute. href is an anchor element attribute that points to a location, and navigates the user to that location by changing the URL in the address bar. You write HTML attributes inside the opening tag of an element. So in the opening a tag, after the a, type href. An attribute is always followed by an equal sign and a value inside either single or double quotation marks. Now as the value for href, we provide the destination or URL of the link. So let's have this anchor element link to this page, the VR page of Treehouse. I'll copy this address and paste the URL as the value for href. The href attribute tells the browser that the text is now a hyperlink. So it displays it blue and underlined. Now a link can point to a number of different locations, like from a page on your website to a page on another website. From one page on your site to another page on the same site. A link can also point to a different location within the same page. They can open in a new browser window or tab. Even link to an email that when clicked, composes an email in the user's default email program. You'll learn more about links and URLs in a later part of this course, but for now let's focus on our link, which navigates users to a page on another website. So when you click to a different website you use what's called an absolute URL as the href value. Absolute URLs provide the browser all the information necessary to navigate the user to a location on the web. So for example, notice how this href value contains the full web address of the link we're pointing to. Absolute URLs use a specific format that begins with http:// or https:// followed by the website domain name and the path to the webpage you wanna link to. I have posted links to resources and a Treehouse video that teaches you more about URLs in the teacher's notes. Now by default, clicking a link navigates to the new location in the current browser window or tab. But sometimes you may want your users to open a link in a new tab or window so that they don't leave the current page. A common reason for this is when you have links that point to a different website, and you want users to remain on your site, even after they're done viewing the other site. So, for instance, on the Treehouse website, some of the links in the teacher's notes point to resources outside of the website. Clicking a link opens the page in a new browser tab, while the video conveniently remains playing in the original tab. So to create a link that opens in a new tab or window, you use the target attribute and set the value to _blank. So back in our opening a tag, right after the href attribute, let's add the target attribute followed by =_blank. I'll give this a save, refresh the browser and now clicking the Start Your VR Journey link opens the page in a new browser tab. You may see links that use only a pound or hash symbol as the href value. So for example, in our blog entries let's add a Read more link  And set the href to a hash or a pound symbol. So now over in the browser, when you click on a Read more link, it navigates you to the top of the page. And you'll see that it adds the hash to the end of the URL in the address bar. Well the hash symbol is often used to link users to different locations of the same page, which we'll do in a later video. And it can also be used as a placeholder href value when you simply want to display a link while building your page. So next, why don't you create links for the top resources items here. And you can point them to any URL you want. And if you want to go further try turning the words in the list home about articles and contact into placeholder links using the hash symbol. In the next stage we are going to turn this list into our main navigation menu. You can see how I added the links in the teacher's notes of this video. In this stage, you created a simple webpage that you'll use as the starting point for the VR website. Coming up in the next stage, I'll introduce you to HTML elements that divide a page into logical sections and group together related elements. You'll also learn why it's important to carefully plan the structure of your HTML and use markup that describes the underlying meaning or what's called the semantics of your content. See you soon.












Semantic HTML: <header>, <footer> and <section>

HTML's role in web design and development is to provide structure and meaning to content. In this video, you'll begin learning HTML's set of elements that describe sections of content.


HTML's role in web design and development is to provide structure and meaning to content. For example, a p tag identifies content as a paragraph, and an h1 tag means that the text inside it is the top level heading of the page. When you write markup that clearly communicates the meaning of your content, it is said that you're writing semantic markup. Now you'll hear the word semantic markup or semantic HTML mentioned a lot in web design and front end web development. Semantics is the meaning behind words, phrases, or any text. Now semantics, as it relates to HTML, is the idea that markup should describe the meaning of your content rather than define its presentation or how it looks. For instance, you wouldn't want to place what should be paragraph text inside an h1 tag just to make the text large and bold. H1 and p tags convey two completely different meanings. Writing semantic markup makes your website more understandable to search engines. Clearly identifying important information using a heading tag, or one of the other tags helps search engines categorize your pages. And help users find the content your site provides. In addition, carefully organizing your content with HTML tags makes your site more accessible to users who rely on assistive technologies to use the web. For example, users with visual impairments use screen readers which literally read out loud the words on a page. Writing semantic markups helps users with screen reading software navigate a site and engage with the content. So as developers, it's our responsibility to be thoughtful about the markup we write, making sure that each tag we use is appropriate for the content. I'll teach you more about semantic markup throughout this course. Now let's get started with HTML's set of elements that help describe sections of content. A typical webpage can be divided into three major sections, a header, footer and main content area. The header is the introductory content usually at the top of the page, containing the site logo, navigation, main heading and site description. At the bottom of the page, a footer contains information about the site. Like the company address, site authors, copyright date, and other site navigation. The pages main content appears between the header and footer. This section contains the most important content on the page. Such as blog entries, videos, news articles, photo galleries, recipes, and so on. It's the section users come to the page to see. Usually, the content inside the header and footer is the same, or very similar, from page to page, while the content area changes. You've seen how the body, head and title tags use standard human readable words to describe the content inside them. Well HTML semantic sectioning and content grouping elements are no different, using words like header, footer, section and article to indicate their purpose in the document. Back in index.html, let's divide our page into logical sections, and we'll start at the top by placing the introductory content here inside a header. So, above the h1 element, type an opening header tag, then place the closing header tag right below the closing ul tag. And to indent the content inside the header tags all at once, select the content then press Cmd or Ctrl followed by the right or closed bracket key once to indent the code two spaces. So now that we've grouped the page's headline, tagline, and navigation list in a header, let's create a footer. Footers are like headers, except they usually appear at the bottom of a page. So right above the closing body tag and below the closing ol tag, type a set of opening and closing footer tags. Inside the footer, let's include a paragraph tag that contains the name of the blog and the copyright date. Now this strange looking ampersand copy text is called an HTML character entity and it's how you add a copyright symbol in HTML. I teach you more about these characters in a later video. In between the header and footer, the page's main content area is usually further divided into subsections based on how you want to logically group your content. So for example, the intro paragraph and call to action link below the header are not closely related to the blog entries below it. So let's divide the main content area by grouping the blog entries into a section of their own. And HTML has just the element for that, section. The section element groups together related sections of content, like a group of blog entries, news articles, or video. So just above the h2 tag, type an opening section tag. Then add the closing section tag below the last blog entry or just above the resources list so that it wraps all the blog entries. And again, it's a good idea to indent the code inside the section by selecting it and pressing Cmd or Ctrl followed by the closed bracket key. The first element of each section should always be a heading that indicates what the section is about or its topic. In this case, it's the latest articles about virtual reality. Next, let's add two more sections to our page. The About section and the Contact section. So right above the article section we just wrote, let's add a set of opening and closing section tags, and inside this section, I'll nest an h2 to indicate what the section is about. In this case it's the about content so I'll type about this site. Right below the h2, I'll add a paragraph and paste in some placeholder text that will serve as the about text for our site, and you can copy this snippet from the teachers notes of this video. All right, let's give this a save and have a look in the browser. Here we have the about content. So now let's add the Contact section of the page, and we'll do so below our article section. So back inside index.html, I'll scroll down to just above the footer, and add a set of opening and closing section tags. Inside the section element, I'll had an h2 with a text contact, and right below a paragraph with the text, Email us at, I'll make up an email here, coolvrexperience, @gmail.com. And there we have it. Now there are no hard and fast rules about when to use or not to use sections. They're simply tags for organizing your content and you can decide when it makes sense to group related content into a section. And sections can also give your page clearer structure and can help assistive technologies like screen readers, used by the visually impaired users, to identify distinctive parts of a page. Now there are other sectioning elements, like the article tag, that are used for more specific types of content grouping. I'll teach you those in the next video.











Sectioning Content with <article>, <nav> 

 Let's continue organizing & structuring our content into logical bits, using HTML's content sectioning elements.

  In this video, you'll learn how to use the <article>, <nav>, and <aside> tags  Alright. Let's keep on organizing and structuring our content into logical bits using HTML's content sectioning elements. In this video, you'll learn how to use the article, nav, and aside tags in your projects. So the article section of our page contains groups of individual blog entries that link to the full post. Now even though they all have a common theme, VR, each entry represents an independent stand-alone article in our webpage, so we should use markup to contain each entry. The article sectioning element describes self-contained pieces of content like our blog entries. So let's place opening and closing article tags around each of the two entries. So I'll place the opening article tag just above the h3 of our first blog entry, and the closing article tag below its link. I'll select and indent the content, and do the same for our next entry. So each article now represents a complete or self-contained unit on the page that can make sense on its own, even when displayed on another website or blog. So for example, an article in a magazine or newspaper can be plucked out of the pages and still be read and understood by readers, even though a reader may not know which magazine or newspaper the article came from. The article still makes sense on its own because it contains a heading, content, and information about the article like the publish date and author. So an article element should wrap content that could be syndicated and pulled into another website, or linked to via social media, or a news aggregation site like reddit.com. And this includes individual blog posts, magazine and news articles, foreign posts or any independent chunk of content. In addition, article elements should always include a heading that identifies the article. Now another sectioning element, with a very specific purpose, is the nav tag. When a section of your page contains a list of links to other pages, or to parts within the page, you should use markup to communicate that it's an important section containing navigation links. The nav element describes just that, a navigation or set of related links. Currently, our site navigation uses the ul or unordered list tag to display the list of links. So let's wrap the ul in the header with opening and closing nav tags. You should use the nav element only for major sections of navigation, not for every link to another page or website. However it is okay to have more than one nav element on a page. For example, you might have a navigation element that includes links to the major parts of your website and the header and a nav element in the footer that links to pages with different information about your company. The nav element also helps users who navigate and read your site using assistive technologies, like screen readers, quickly and easily find the navigation sections of your site. Lastly, let me show you the aside tag. It's used for sectioning content that's sort of related to the main topic of the page, but could be removed without affecting a user's understanding of the main content. So this is content you'll often see presented as a sidebar on a website. For example, you could use the aside element to include your Twitter feed on a page or a list or related articles or resources. In fact, we have a list of top resources just above the contact section of our page. And this content isn't directly related to the main content sections of our site, but it does hold content that is related to the entire page. So let's group the h3 and ol elements inside a set of opening and closing aside tags. So when you need to section content that's not the main focus of the page but is still related or complimentary to the page as a whole, place the content in an aside.








Marking Up a Blog Post

Let's create a new page (a blog post) for the site. In the process, you'll use most of the HTML tags you've learned to mark up the content in a semantic way.


All right let's create a new page, a blog post for our site. In the process I'll show you how to use all the tags I've taught you so far to mark up the content in a logical or semantic way. In our work space, let's create a new HTML page by clicking File, New File, and we'll name this page article.html To set up the page quickly we can use the HTML from the index.html file then add to it. So I'll select all the code here inside index.html by pressing Ctrl or Cmd+A then Ctrl or Cmd+C. Then I'll switch over to article.html and press Ctrl or Cmd+V to paste the code. So in this new page we're going to mark up an article or blog post. So the first thing we'll update is the title of the page here in the title tag. Let's change it to VR Article. And inside the body we'll keep the header and footer elements, but let's select and delete all the content in between. So everything from this paragraph down to the section element just above the footer. This page is going to consist of standalone content that could be syndicated or pulled into another website. So, which HTML sectioning element should we use to wrap our content here? Well, remember an article is a self contained component in a page, so below the closing header tag, I'll type a set of opening and closing article tags to wrap all my content. And next, we'll need to add the article heading. So I'll include an h2 with the text VR Article. Then, right below the h2, I'll quickly add content by pasting a few paragraph elements with placeholder text, and you can copy these paragraph snippets from the teacher's notes of this video. So now when you click the Preview button, in workspaces, the browser always opens the index.html file on the site. So to preview our new article page in the browser, you need to replace index.html with the name of this file article.html in the URL in the address bar. Now, your workspace preview URL may look different than mine. So, right after treehouse-app.com I'll type a forward slash followed by article.html. And we're able to see our new article webpage, great. In the previous video, you learned that the aside element represents a section of content, that's complementary to the main content and could be considered separate from that content. An aside element can also have different meanings based on whether it's placed inside or outside an article element. So, for example, an aside that's nested inside an article holds content that's related to the article, but not the primary focus of the article. A pulled quote from the article, for instance, can be placed inside an aside because it's directly related to the article's content, but not essential to the overall meaning of the article. So in other words, you could remove the quote from the article and the content would still be understood without it. So in between the two paragraphs here in our article, let's add an aside element. And inside this aside, we'll mark up the quote using the q tag, which indicates that the text is a short inline quotation. So inside the " tag let's write the text. " This is a pulled quote from the VR Article. And as you can see the " tag adds quotes around the pulled quote. " Now an aside element that's placed outside an article should describe content that's related to the entire page. So for example a side navigation or a list of the top articles or related posts in a page. So back at our page below the closing article tag. Let's add an aside tag that contains a list of links to more articles about VR. So inside the inside I'll add an h3 with the text, more articles about VR. And below the heading I'll display the list of links using an unordered list. Although this is a list of links, it's not considered a major navigation component, so I'm not gonna place the list inside a nav element. So first I'll add an li, and inside that I'll nest a link. And I'll make it a placeholder link. With the text Make a VR Game. Let's go ahead and copy this one. Paste it below. Let's change the text to something like Learn VR in Unity. I'll add one more. And you can add as many as you like. So this one will be Build User Interfaces in VR. I'll give this a save. Refresh the browser, and great. You've just coded your very first blog post using semantic markup. Well done! So now, to point the read more links on the homepage to our new article page, we can include the name of the file as the h ref file. The over in index.html. So let's scroll down to our VR Articles. And for our first article. Type article.html as the href value. And I'll just go ahead and copy it and paste it into the second value. Refresh. And when I click the Read more links, they take me to the new VR Article page. Awesome! And you'll learn a whole lot more about the different ways you can link to a web page in a later video.












Grouping Content with <main> and <div>

The <main> element represents the main content inside the body of the page, and <div> is a generic container that groups content.

The main element represents the main content inside the body of the page. The purpose of the main tag is to help screen readers and other assistive technologies identify exactly where the main content of a page begins. The main content of our homepage consists of the about, articles, and contact section, so let's place those sections inside a main element. So I'll scroll up to the first about section and type an opening main tag, then I'll include the closing main tag right below the articles closing section tag. And I'm also going to cut and paste our contact section inside the new main element All right, so now I'll teach you a handy shortcut you can use to quickly select and indent large sections of code like this all at once. So to indent all the content inside our main element place your cursor after contacts closing section tag. Then scroll up and press the Shift key while clicking in front of the first opening section tag, that selects everything. And now you can press Cmd or Ctrl followed by the closed bracket key to indent all the code at once. You should use main only once per page, and it shouldn't include content that might be repeated across other pages like a navigation bar, copyright information, a list of ads and resources, and so on. So for example the header, footer, aside, and intro content in our page could apply to every page on the website, and aren't specific or unique to this page so they go outside the main element. Now you'll sometimes have content that can't be described by any of the semantic HTML sectioning or grouping tags. For example, the intro paragraph and link below the header do not create a new section of content and are not the primary focus of the page. And I also wouldn't consider this an article because it's not a complete self contained unit that can make sense on its own. So when no other element is suitable, you can group content with a div element. The div is a generic container that has almost no semantic meaning, it's just a wrapper that groups together related content. And an intro paragraph like ours is a good example of where you can use a div element in your page, so let's place the intro paragraph and link around opening and closing div tags. Designers and developers also use the div element as the wrapper for the entire page, so let's add an opening div tag below the opening body tag. Then scroll all the way down to the bottom of the file, and include the closing div tag just above the closing body tag. And once again, to indent all the content inside the wrapper div you can place your cursor after the closing footer tag. Then scroll up and press the Shift key while clicking in front of the opening header tag. Then press Cmd or Ctrl followed by the closed bracket key too and then all the code. A wrapper div gives you more control over the width of your layout to prevent your content from appearing too wide or too narrow, and it makes it easier to center your layout on the page with CSS as you'll learn in a later course. So now I'll go ahead and apply the wrapper div to our new articles page. In the previous video you learned that the q tags is for marking up short inline quotes. Well HTML offers a blockquote tag for marking up long, multi-line quotations. For instance, if you're writing a blog post where you quote an excerpt from a book, article, or another source, you should wrap that quote inside blockquote tags. So over in index.html let's include a code about virtual reality inside the aside element. So right below the closing ol tag type a set of opening and closing blockquote tags. And inside the blockquote I'll include a well known virtual reality quote by Mark Zuckerberg, the co-founder and CEO of Facebook. Now you can copy this code and the next few snippets from the teacher's notes of this video. Inside the opening blockquote tag you can optionally use the cite attribute to include a reference to the text you're quoting. So as the value you include the link to the source of the quote, which is going to be this Facebook page here, and you can find this link in the teacher's notes. So back in the opening blockquote tag I'll paste in the URL to the Facebook page as the cite value. You can also credit the source or the author of the quote using cite tags within the blockquote. So I'll undo the cite attribute, and inside our quote I'll wrap the name Mark Zuckerberg inside opening and closing attribute tags. And inside this cite element I'll add an anchor element to link Which once again will be this I'll give this a save, refresh the browser, and there and if we click on Mark Zuckerberg it takes us to the Facebook And in a blockquote it's also acceptable to source within So right after the quoted text I'll add an then place the closing footer tag just after the So here the footer clearly relates the quote to its Now at this point you may be thinking wait a second, isn the bottom section of the page, we already Well you're not restricted to using just one footer In fact you can use multiple footers, even headers you'll learn why in the next video.









Using Multiple <header> and <footer> Elements

You can use multiple <footer> and <header> elements in one page. You nest footers inside other elements to contain footer information for that section of the page. Nested headers represent introductory content for a section of the page.

You learn that a footer usually contains information about the page. Like the copyright date, author information and a navigation. When a footer element is directly nested inside the body element or wrapper div in this case, it represents a footer for the page as a whole. However, you can use more than one footer per page. Footers can be nested inside other elements like main, section, and block quote to contain footer information for just that section of the page. For example, in the previous video we included a footer inside the block quote to clearly relate the quote to its author and source. So now, let's add a footer inside the articles that contain information related only to the article, like a publish date. So in our first article, right below the Read more link, I'll add a footer element, and inside the text, published June 12th, 2017, and you can add any date you like. Go ahead and do the same for the second article by copying this footer, and pasting it below the Read more link. And I'll change this date to say June 19th. Now just like footers, you can include multiple headers in your page each of which represent introductory content for just that section of the page. And it's common to place the title of an article inside a header along with other information like the author, date, or category. So, let's wrap both of our articles titles with header tags and we'll also include an author name. So I'll wrap the h3 inside a header element, and right below the h3, I'll add a paragraph with the author name. So let's say by Nick Pettit. And we'll do the same for our next article. Finally, let's use a header in our Article page to contain the articles title, author name, and publish date. So, I'll wrap the h2 inside header tags. And then inside, let's add a paragraph with author name. Again, you can use any name you want here. And right below, add a second paragraph, and we'll include the publish date here, so say published June 19, 2017. Remember when writing HTML we're not only communicating with computers and browsers, but also communicating with humans. Writing clear semantic markup, also means that other developers looking at your code will spend less time focusing on the what, and more time on the why and how. The site is missing perhaps the second most important component of the web, images. So in the next stage you'll learn to add images to draw users into your page and help to guide them through information. And we'll continue with our journey into semantic markup by getting to know text formatting elements that give special meaning to content and more. See you then.












Understanding File Paths

To display an image or link to another page in your site, you need to understand where the file "live" within the folder structure of the site. In this video, we'll look at examples of how to adjust your file paths based on the directory a file is in.


Hey there. Adding images and links is a big part of building websites. To add an image to a page, or link to another page in your site, you need to understand where that image or page lives. In other words, where is the image or page within the folder structure of the site? For example, you might want to add a photo that's inside a folder named images or link to a page that's inside a folder named books, which is inside another folder named products. So to link two other pages, and reference resources of your site like images, you provide a file path, that instructs one file where another file is. The file path is what describes the location of a file in a website's folder structure. So you've learned that when linking to files within the same site, you do not need to specify the full URL, including the https:// or the domain name in the file path like we do with absolute URLs. So for example, to link to the article page, we simply include the path to the filename article.html and the links href value. These types of URLs are called relative URLs because the file path you specify depends on or is relative to where your HTML document lives. Relative URLs provide a shorthand way of letting the browser know where to find your file. The top level folder in a site, or the folder that holds all the files in other folders, is called the root directory. So currently all of our files are in just one directory, the root of the site. So we can link to any file, by including just the file name, article.html for example, however, websites are usually organized by placing resources and files for different section of the site into separate folders. For example, the articles in one folder and images in another folder. So now let's look at a few examples of how to adjust your file paths based on the directory a file's in. First, lets add a new folder for articles. So in our workspaces menu, we'll select File > New Folder, and name it articles. Then select and drag article.html into the new folder. So the article's folder is a child directory, or subdirectory, of the root folder. Over in the browser, clicking one of the Read more links in index.html returns a Not Found page. So now we'll need to adjust the link's path to indicate where article.html is in relation to index.html. So to reference or link to a file that's inside a sub folder like articles, you include the name of the folder, followed by a forward slash and the file name. So in our Read more link's href value we'll type the name of the folder which is articles/article.html. Now let's do the same for the next link. Folder name forward slash followed by the file name. Save our file, we'll refresh the page. You'll see that the Read more links now take you back to the article. Now to link to a file that's inside a parent or root folder, from within a sub folder like articles, you'll need to instruct the browser to go up one level, out of the current folder, and up to its parent folders. For example, in article.html to set the Home link in the nav, to navigate to index.html, from inside this sub folder you will need to include ../ in the href value. Then, after the forward slash, include the file name to link to, in this case index.html. So each ../ instructs the browser to go up one level out of the current folder and up to its container folder. So over in the browser, let's click Read more to bring up the article page. And clicking the Home link takes us back to index.html, because the value tells the browser to go back to the root folder and display index.html. So now let's create a subfolder of articles and we'll name this folder 2017, and place article.html inside it. If we go back to the browser, refresh, and click Read More, we once again get the Not Found page. So now, to link to a file inside this subfolder, that's two levels deep from the root of the project, you include, Articles/2017/article.html. So now, can you figure out how to link back to index.html from this subfolder? Feel free to pause the video and try it. Since each ../ instructs the browser to go up one level out of the current folder, we'll need to include two to move up two directories or back up to the root directory where index.html is located. Give that a save. Let's refresh the article page, and clicking Home takes us back to our home page, perfect. So in the next video, you'll get more practice writing relative file paths, by adding images to the page. See you then.








Adding Images to the Page

Images draw users in and bring color and life to your pages. Designers and developers use images to display logos, avatars, photographs, illustrations, charts and more.
 

Images draw users in and bring color and life to your pages. Designers and developers use images to display logos, avatars, photographs, illustrations, charts, and more. Browsers support several image formats and the most common ones you'll use are JPEG, GIF, PNG You can learn more about these image formats in the teacher's notes for this video. In the JPEG format we're using in our project is commonly used to display imagery or photographs that contain great detail in many different colors. Now to keep your files organized, it's best to place images in a separate folder. So let's go over to File, New Folder to create a new folder, and we'll name this folder img or image. Now drag all three image files into the image folder Next let's add the featured.jpg image to our page by including it inside the intro div here in index.html. So the image element represents an image in the document, so let's add an image tag above the paragraph. Now the image element is considered an empty element, meaning it does not contain any child content and it doesn't have a separate closing tag. And the image tag requires a source attribute, and source lets the browser know the location of the image. So the value needs to be the path to the image you want to display and featured.jpe is located inside the image folder. So as the value for source, we'll type the relative URL img/featured.jpg Now image elements need to provide the browser a text description of the image via the alt attribute. The alt attribute is an important accessibility attribute that displays replacement or alternative text to users when an image is not available. So for example, if the image URL is wrong or if the image format is not supported by the browser or if the image is not yet downloaded. And some users also disable images in the browser to save on download costs. So adding alternative text for images is required to make your site more accessible to users. It's a best practice. In addition users with visual impairments use assistive technologies like screen readers to read webpages to them. And the contents of the alt attribute is read by these technologies to these users. So it's important to write alternative text that describes the contents of the image and that helps describe the image to users. So for example, I'll set the alt text of my featured image to Virtual reality user. You can learn more about tips for writing good and meaningful alt texts in the teacher's notes of this video. So now, let's add an image to the about section of our page. So we'll include an image tag right below the about paragraph, and let's set the source attribute to the path img/vr-space .jpg, And now we'll give the image some alt text. So I'll add an alt attribute, and set the text to user experiencing space in VR. Now by default, the image element displays an image using the inherent dimensions of the image file. So for example, featured.jpg is 300 by 300 pixels and vrspace.jpg is 500 pixels by 327 pixels. Now if you wanna add additional information about an image to your users, you can include a title attribute inside the image tag. So for instance, right after the alt text for the about image, we'll add a title attribute and inside add the text, Virtual reality users Can explore far away places. And feel as though they are right in the middle of the action. So we'll give this a save, refresh the browser, and you'll see that most browsers present this information to the user when they hover over the image. And this is refer to as a tool tip. All right, so now that you've had practice with file pads and editing images into the page, why don't you include the vr-user.jpg image inside the article file in the 2017 sub-folder here? And you can see how I added the image in the next video.

